{"files":{"pxt.json":"{\n    \"name\": \"arcade-text\",\n    \"version\": \"1.3.0\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"text.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"1.2.6\",\n        \"targetId\": \"arcade\"\n    },\n    \"supportedTargets\": [\n        \"arcade\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"pxt-on-start\" id=\"6Y6q)ncpNy{?8D%D=cv?\" x=\"0\" y=\"0\"/></xml>","main.ts":"\n","README.md":"# Text Sprite ![Build status badge](https://github.com/microsoft/arcade-text/workflows/MakeCode/badge.svg)\n\n## Usage\n\nThis extension allows you to create \"text sprites\" which are just sprites created with the visual appearance of text. All standard behavior and APIs for sprites apply to them. In addition, the Text Sprite extension has helpful blocks for working with and changing the appearance of text sprites.\n\nNote that when unicode characters are in use, the font height used in text sprites will always be a multiple of 12px. Whereas otherwise we prefer to use multiples of height 8px or 5px fonts.\n\n<img width=\"416\" alt=\"Screen Shot 2020-08-20 at 8 00 21 AM\" src=\"https://user-images.githubusercontent.com/6453828/90789027-40137480-e2bb-11ea-81bd-440fa19abdc0.png\">\n\n## Use this extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open https://arcade.makecode.com/\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for the URL of this repository and import\n\n## Edit this extension\n\nTo edit this repository in MakeCode.\n\n* open https://arcade.makecode.com/\n* click on **Import** then click on **Import URL**\n* paste the repository URL and click import\n\n## Blocks preview\n\nThis image shows the blocks code from the last commit in master.\nThis image may take a few minutes to refresh.\n\n![A rendered view of the blocks](https://github.com/microsoft/arcade-text/raw/master/.makecode/blocks.png)\n\n## Supported targets\n\n* for PXT/arcade\n* for PXT/arcade\n(The metadata above is needed for package search.)\n\n# Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\n\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n","text.ts":"namespace SpriteKind {\n    //% isKind\n    export const Text = SpriteKind.create();\n}\n\n//% blockNamespace=\"textsprite\"\n//% blockGap=8\nclass TextSprite extends Sprite {\n    constructor(\n        public text: string,\n        public bg: number,\n        public fg: number,\n        public maxFontHeight: number,\n        public borderWidth: number,\n        public borderColor: number,\n        public padding: number,\n        public outlineWidth: number,\n        public outlineColor: number,\n        public icon: Image = null,\n    ) {\n        super(image.create(0,0));\n        this.setKind(SpriteKind.Text);\n        this.setFlag(SpriteFlag.Ghost, true);\n        this.update()\n    }\n\n    public update() {\n        const borderAndPadding = this.borderWidth + this.padding + this.outlineWidth;\n        const iconWidth = this.icon ? this.icon.width + this.padding + this.outlineWidth : 0;\n        const iconHeight = this.icon ? this.icon.height : 0;\n        const font = textsprite.getFontForTextAndHeight(this.text, this.maxFontHeight);        \n        const width = iconWidth + font.charWidth * this.text.length + 2 * borderAndPadding;\n        const height = Math.max(iconHeight, font.charHeight) + 2 * borderAndPadding;\n        const img = image.create(width, height);\n        img.fill(this.borderColor);\n        img.fillRect(this.borderWidth, this.borderWidth, width - this.borderWidth * 2, height - this.borderWidth * 2, this.bg)\n        if (this.icon) {\n            const iconHeightOffset = (height - iconHeight) / 2\n            textsprite.renderScaledImage(this.icon, img, borderAndPadding, iconHeightOffset)\n        }\n        const textHeightOffset = (height - font.charHeight) / 2\n        img.print(this.text, iconWidth + borderAndPadding, textHeightOffset, this.fg, font);\n        if (this.outlineWidth > 0)\n            textsprite.outlineOtherColor(img, this.fg, this.outlineWidth, this.outlineColor)\n        this.setImage(img)        \n    }\n\n    //% block=\"set $this(textSprite) max font height $height\"\n    //% group=\"Modify\"\n    //% weight=50\n    public setMaxFontHeight(height: number) {\n        this.maxFontHeight = height\n        this.update();\n    }\n\n    //% block=\"set $this(textSprite) icon $icon=screen_image_picker\"\n    //% group=\"Modify\"\n    //% weight=46\n    public setIcon(icon: Image) {\n        this.icon = icon\n        this.update()\n    }\n\n    //% block=\"set $this(textSprite) text $text\"\n    //% group=\"Modify\"\n    //% weight=47\n    public setText(text: string) {\n        this.text = text || \"\"\n        this.update()\n    }\n\n    //% block=\"set $this(textSprite) border $width $color || and padding $padding\"\n    //% width.defl=1\n    //% color.defl=6\n    //% color.shadow=\"colorindexpicker\"\n    //% group=\"Modify\"\n    //% weight=48\n    public setBorder(width: number, color: number, padding: number = 0) {\n        this.borderWidth = Math.max(width, 0);\n        this.borderColor = color;\n        this.padding = Math.max(padding, 0);\n        this.update()\n    }\n\n    //% block=\"set $this(textSprite) outline $width $color\"\n    //% width.defl=1\n    //% color.defl=6\n    //% color.shadow=\"colorindexpicker\"\n    //% group=\"Modify\"\n    //% weight=49\n    public setOutline(width: number, color: number) {\n        this.outlineWidth = Math.max(width, 0);\n        this.outlineColor = color;\n        this.update();\n    }\n}\n\n//% color=#3e99de\n//% icon=\"\\uf031\"\n//% blockGap=8 block=\"Text Sprite\"\n//% groups='[\"Create\", \"Modify\"]'\nnamespace textsprite {\n\n    // TODO: downscale and upscale icons?\n    export function renderScaledImage(source: Image, destination: Image, x: number, y: number, downScalePowerOfTwo: number = 0) {\n        const scale = downScalePowerOfTwo;\n        const tile = source\n        for (let i = 0; i < source.width; i += 1 << scale) {\n            for (let j = 0; j < source.height; j += 1 << scale) {\n                if (source.getPixel(i, j) != 0) {\n                    destination.setPixel(x + (i >> scale), y + (j >> scale), source.getPixel(i, j))\n                }\n            }\n        }\n    }\n\n    export function getFontForTextAndHeight(text: string, maxHeight: number): image.Font {\n        const baseFont = image.getFontForText(text)\n        const hasUnicode = baseFont.charHeight === 12  // this is a hack\n        const availableFonts: image.Font[] = hasUnicode \n            ? [baseFont] \n            : [image.font8, image.font5] // 8 and 5 are generally better fonts than 12\n        const remainders = availableFonts.map(s => maxHeight % s.charHeight)\n        const fontIdx = remainders.reduce((p, n, i) => remainders[p] <= n ? p : i, 99)\n        const font = availableFonts[fontIdx]\n        return image.scaledFont(font, maxHeight / font.charHeight)\n    }\n\n    //% block=\"text sprite $text || as $fg on $bg\"\n    //% blockId=\"textsprite_create\"\n    //% blockSetVariable=\"textSprite\"\n    //% expandableArgumentMode=\"toggle\"\n    //% bg.defl=0\n    //% bg.shadow=\"colorindexpicker\"\n    //% fg.defl=1\n    //% fg.shadow=\"colorindexpicker\"\n    //% group=\"Create\"\n    //% weight=100\n    export function create(\n        text: string,\n        bg: number = 0,\n        fg: number = 1,\n    ): TextSprite {\n        const sprite = new TextSprite(text, bg, fg, 8, 0, 0, 0, 0, 0);\n        game.currentScene().physicsEngine.addSprite(sprite);\n        return sprite;\n    }\n\n    export function outlineOtherColor(img: Image, targetColor: number, outlineWidth: number, outlineColor: number) {\n        let toOutlineX: number[] = [];\n        let toOutlineY: number[] = [];\n        for (let x = 0; x < img.width; x++) {\n            for (let y = 0; y < img.height; y++) {\n                for (let sx = 0; sx <= outlineWidth; sx++) {\n                    for (let sy = 0; sy <= outlineWidth; sy++) {\n                        if (sx + sy === 0)\n                            continue;\n                        if (img.getPixel(x, y) === targetColor)\n                            continue\n                        if (img.getPixel(x + sx, y + sy) === targetColor\n                            || img.getPixel(x - sx, y + sy) === targetColor\n                            || img.getPixel(x + sx, y - sy) === targetColor\n                            || img.getPixel(x - sx, y - sy) === targetColor\n                            ) {\n                            toOutlineX.push(x)\n                            toOutlineY.push(y)\n                        }\n                    }\n                }\n            }\n        }\n        for (let i = 0; i < toOutlineX.length; i++) {\n            const x = toOutlineX[i]\n            const y = toOutlineY[i]\n            img.setPixel(x, y, outlineColor)\n        }\n    }\n}","test.ts":"// tests go here; this will not be compiled when this package is used as an extension.\nlet s3: TextSprite = null\nlet s2: TextSprite = null\nlet s1: TextSprite = null\ninfo.setScore(99999)\ninfo.setLife(5)\nlet heights = [5, 8, 12, 24]\nlet y = 24\nfor (let h of heights) {\n    s1 = textsprite.create(\"水\", 9, 8)\n    s1.setBorder(1, 6, 1)\n    s1.setMaxFontHeight(h)\n    s1.setOutline(1, 1)\n    s1.left = 2\n    s1.top = y\n    s2 = textsprite.create(\"h\" + h)\n    s2.setMaxFontHeight(h)\n    s2.setOutline(1, 6)\n    s2.left = 36\n    s2.top = y\n    s3 = textsprite.create(\"x\" + \"99\", 1, 3)\n    s3.setBorder(1, 3, 1)\n    s3.setMaxFontHeight(h)\n    s3.setIcon(img`\n        . . 8 . .\n        . . 8 . .\n        . 8 8 8 .\n        8 8 9 8 .\n        8 9 1 8 .\n        8 9 1 9 8\n        8 8 9 9 8\n        . 8 8 8 .\n    `)\n    s3.left = 92\n    s3.top = y\n    y += Math.max(s1.height, s2.height) + 2\n}\n"}}